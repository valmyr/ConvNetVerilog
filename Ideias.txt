Trabalha com índices 
   0 1 2 3 4 5 6 7 
m = 
0  1 2 3 4 1 2 3 4 
1  1 2 3 4 1 2 3 4 
2  1 2 3 4 1 2 3 4
3  1 2 3 4 1 2 3 4
4  6 7 8 9 6 7 8 9
5  6 7 8 9 6 7 8 9
6  6 7 8 9 6 7 8 9
7  6 7 8 9 6 7 8 9

(0+0,0+0) (0+0,1+0) (0+0,2+0) (0+0,4+0)
(1+0,0+0) (1+0,1+0) (1+0,2+0) (1+0,4+0)
(2+0,0+0) (2+0,1+0) (2+0,2+0) (2+0,4+0)
(3+0,0+0) (3+0,1+0) (3+0,2+0) (3+0,4+0)
(4+0,0+0) (4+0,1+0) (4+0,2+0) (4+0,4+0) 

(0+0,0+4) (0+0,1+4) (0+0,2+4) (0+0,3+4)
(1+0,0+4) (1+0,1+4) (1+0,2+4) (1+0,3+4)
(2+0,0+4) (2+0,1+4) (2+0,2+4) (2+0,3+4)
(3+0,0+4) (3+0,1+4) (3+0,2+4) (3+0,3+4)
(4+0,0+4) (4+0,1+4) (4+0,2+4) (4+0,3+4) 

(0+4,0+0) (0+4,1+0) (0+4,2+0) (0+4,3+0)
(1+4,0+0) (1+4,1+0) (1+4,2+0) (1+4,3+0)
(2+4,0+0) (2+4,1+0) (2+4,2+0) (2+4,3+0)
(3+4,0+0) (3+4,1+0) (3+4,2+0) (3+4,3+0)
(4+4,0+0) (4+4,1+0) (4+4,2+0) (4+4,3+0) 

(0+4,0+4) (0+4,1+4) (0+4,2+4) (0+4,3+4)
(1+4,0+4) (1+4,1+4) (1+4,2+4) (1+4,3+4)
(2+4,0+4) (2+4,1+4) (2+4,2+4) (2+4,3+4)
(3+4,0+4) (3+4,1+4) (3+4,2+4) (3+4,3+4)
(4+4,0+4) (4+4,1+4) (4+4,2+4) (4+4,3+4) 


0           0
0           N/2
N/2         0
N/2         N/2

0           0           0
0           0           N/2
0           N/2         0
0           N/2         N/2
N/2         0           0
N/2         0           0
N/2         0           N/2
N/2         N/2         0
N/2         N/2         N/2


Considerações:
-Matrizes quadradas
-Divisão inicial por N = 2 
Indexador0   0 a N/2 -- inicio (i,j)=(0,0)


Criar novas matrizes 




Trabalha com índices


Criar novas matrizes

logic [7:0] m [7:0][7:0] 
m =[
      1 2 3 4 1 2 3 4
      1 2 3 4 1 2 3 4
      1 2 3 4 1 2 3 4
      1 2 3 4 1 2 3 4
      6 7 8 9 6 7 8 9
      6 7 8 9 6 7 8 9
      6 7 8 9 6 7 8 9
      6 7 8 9 6 7 8 9
]
m1 = m[0:4][0:4]


1 2 3 4 4 3 2 1
1 2 3 4 4 3 2 1
1 2 3 4 4 3 2 1
1 2 3 4 4 3 2 1
6 7 8 9 9 8 7 6
6 7 8 9 9 8 7 6
6 7 8 9 9 8 7 6
6 7 8 9 9 8 7 6

0,    N/4, 
N/2, 3N/4


inpMatrixIdinKer[s][w][k][l] <= inpMatrixI[k+i+subdivisoes[s][w]][l+j+subdivisoes[s][w]];

inpMatrixIdinKer[0][0][k][l] <= inpMatrixI[k+i+0][l+j+0];

N=32


inpMatrixIdinKer[0][0][k][l] <= inpMatrixI[k+i+00][l+j+00];
inpMatrixIdinKer[0][1][k][l] <= inpMatrixI[k+i+00][l+j+08];
inpMatrixIdinKer[1][0][k][l] <= inpMatrixI[k+i+16][l+j+16];
inpMatrixIdinKer[1][1][k][l] <= inpMatrixI[k+i+24][l+j+24];



inpMatrixIdinKer[0][0][0][0] <= inpMatrixI[00][00];
inpMatrixIdinKer[0][1][0][0] <= inpMatrixI[00][08];
inpMatrixIdinKer[1][0][0][0] <= inpMatrixI[16][16];
inpMatrixIdinKer[1][1][0][0] <= inpMatrixI[24][24];

inpMatrixIdinKer[0][0][0][1] <= inpMatrixI[0+1+00][0+1+00];
inpMatrixIdinKer[0][1][0][1] <= inpMatrixI[0+1+00][0+1+08];
inpMatrixIdinKer[1][0][0][1] <= inpMatrixI[0+1+16][0+1+16];
inpMatrixIdinKer[1][1][0][1] <= inpMatrixI[0+1+24][0+1+24];



inpMatrixIdinKer[0][0][0][1] <= inpMatrixI[01][01];
inpMatrixIdinKer[0][1][0][1] <= inpMatrixI[01][09];
inpMatrixIdinKer[1][0][0][1] <= inpMatrixI[17][17];
inpMatrixIdinKer[1][1][0][1] <= inpMatrixI[25][25];

